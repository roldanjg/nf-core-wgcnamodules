/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/wgcnamodules Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                             = null
    salmon_dir                        = null
    genes                             = null
    norm                              = null
    contrast                          = null
    diff_exp_genes                    = false
    fdr                               = 0.05
    log2ratio                         = 1

    //differential abundance
    study_name                        = 'study'
    study_type                        = 'rnaseq'
    study_abundance_type              = 'counts'
    deseq2_test                       = "Wald"
    deseq2_fit_type                   = "parametric"
    deseq2_sf_type                    = 'ratio'
    deseq2_min_replicates_for_replace = 7
    deseq2_use_t                      = false
    deseq2_lfc_threshold              = 0
    deseq2_alt_hypothesis             = 'greaterAbs'
    deseq2_independent_filtering      = true
    deseq2_p_adjust_method            = 'BH'
    deseq2_alpha                      = 0.1
    deseq2_minmu                      = 0.5
    deseq2_shrink_lfc                 = true
    deseq2_cores                      = 1
    deseq2_vs_blind                   = true
    deseq2_vst_nsub                   = 1000
    deseq2_vs_method                  = 'rlog'
    contrasts                         = null
    transcript_length_matrix          = null

    // Sample sheet options
    observations_type                 = 'sample'
    observations_id_col               = 'sample'
    observations_name_col             = 'sample'
    filtering_min_samples             = 1
    filtering_min_abundance           = 1
    filtering_min_proportion          = null
    filtering_grouping_var            = null
    // Feature options
    features                          = null
    features_type                     = 'gene'
    features_id_col                   = 'gene_id'
    features_name_col                 = 'gene_name'
    features_metadata_cols            = 'gene_id,gene_name,gene_biotype'
    features_log2_assays              = null
    // Exploratory options
    exploratory_main_variable         = 'auto_pca'
    exploratory_clustering_method     = "ward.D2"
    exploratory_cor_method            = "spearman"
    exploratory_n_features            = 500
    exploratory_whisker_distance      = 1.5
    exploratory_mad_threshold         = -5
    exploratory_assay_names           = "raw,normalised,variance_stabilised"
    exploratory_final_assay           = "variance_stabilised"
    exploratory_palette_name          = 'Set1'

    differential_file_suffix                = ".deseq2.results.tsv"
    differential_feature_id_column          = "gene_id"
    differential_feature_name_column        = "gene_name"
    differential_fc_column                  = "log2FoldChange"
    differential_pval_column                = "pvalue"
    differential_qval_column                = "padj"
    differential_min_fold_change            = 1
    differential_max_pval                   = 1
    differential_max_qval                   = 0.05
    differential_foldchanges_logged         = true
    differential_palette_name               = 'Set1'
    differential_subset_to_contrast_samples = false

    logo_file                  = "${projectDir}/docs/images/nf-core-differentialabundance_logo_light.png"
    css_file                   = "${projectDir}/assets/nf-core_style.css"
    citations_file             = "${projectDir}/CITATIONS.md"
    report_file                = "${projectDir}/assets/differentialabundance_report.Rmd"
    report_title               = null
    report_author              = null
    report_description         = null
    report_scree               = true

    // Boilerplate options
    outdir                     = null
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    monochromeLogs             = false
    hook_url                   = null
    help                       = false
    version                    = false

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = true
    validationLenientMode            = false
    validationSchemaIgnoreParams     = ''
    validationShowHiddenParams       = false
    validate_params                  = true

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/wgcnamodules custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific institutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/wgcnamodules.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/wgcnamodules profiles: ${params.custom_config_base}/pipeline/wgcnamodules.config")
// }
profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        channels               = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions      = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 4
        executor.memory        = 8.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core-wgcnamodules'
    author          = """roldanjg"""
    homePage        = 'https://github.com/roldanjg/nf-core-wgcnamodules'
    description     = """Pipeline to generate corelated gene modules using WGCNA and nf-core rnaseq pipeline output data."""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
